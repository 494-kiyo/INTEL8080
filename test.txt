#include<stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <SDL2/SDL.h>
#include <stdbool.h>

#define MEMORY_SIZE 65536
#define HIGH_BYTE(reg) ((uint8_t)((reg >> 8) & 0xFF))
#define LOW_BYTE(reg) ((uint8_t)(reg & 0xFF))
#define SET_HIGH_BYTE(reg, value) ((reg) = ((reg) & 0x00FF) | ((value) << 8))

#define CARRY_MASK ((1 << 1) - 1) << 0
#define PARITY_MASK ((1 << 1)- 1) << 2
#define AC_MASK ((1 << 1)- 1) << 4
#define ZERO_MASK ((1 << 1)- 1) << 6
#define SIGN_MASK ((1 << 1)- 1) << 7

uint16_t AF = 0;
uint16_t BC = 0;
uint16_t DE = 0;
uint16_t HL = 0;
uint16_t SP = 0;
uint16_t stack[16] = {0};

int fileSize;

typedef struct {
    uint8_t z : 1;
    uint8_t s : 1;
    uint8_t p : 1;
    uint8_t c : 1;
    uint8_t ac : 1;
    uint8_t pad : 3;
} ConditionCodes;

typedef struct {
    uint8_t a;
    uint8_t b;
    uint8_t c;
    uint8_t d;
    uint8_t e;
    uint8_t h;
    uint8_t l;
    uint16_t sp;
    uint16_t pc;

    ConditionCodes cc;
    uint8_t *memory[MEMORY_SIZE];

} i8080;

void initializeState(i8080* state) {
    state->a = 0x00;
    state->b = 0x00;
    state->c = 0x00;
    state->d = 0x00;
    state->e = 0x00;
    state->h = 0x00;
    state->l = 0x00;
    state->sp = 0x0000;
    state->pc = 0x0000;
}

int loadROM (i8080* state) {
    FILE* file = fopen("CPUTEST.COM", "rb");
    if (!file) {
        fprintf(stderr, "Error: Could not open file\n");
        return NULL;
    }

    // file size
    fseek(file, 0, SEEK_END); // file pointer to the end
    size_t file_size = ftell(file); // get the position
    fseek(file, 0, SEEK_SET); // return to the starting position

    //unsigned char* buffer = malloc(file_size + 0x0100);
    if (file_size > (sizeof(state->memory) - 0x0100)) {
        fprintf(stderr, "Error: Could not allocate buffer\n");
        fclose(file);
        return NULL;
    }

    if (fread(state->memory + 0x100, 1, file_size, file) != file_size) {
        fprintf(stderr, "Error: Could not read in data\n");
        //free(buffer);
        fclose(file);
        return NULL;
    }

    fileSize = file_size;
    fclose(file);
    printf("Loaded in file");
    return 0;
}

void opcodeExtract (i8080* state) {
    unsigned char* opcode = state->memory[state->pc];
    //printf("%02x", codebuffer[PC]);
    switch (*opcode) {
        case (0x00): // NOP
            break;
        case (0x01): // LXI B, d16
        case (0x02): // STAX B
        case (0x03): // INX B
        case (0x04): // INR B (S, Z, A, P)          
    }
    state->pc += 1;
}

int main (int argc, char** argv) {
    
    i8080 state;
    loadROM();
    //unsigned char* buffer = loadROM();
    int PC = 0x0100;
    buffer[0x0000] = 0xD3;
    buffer[0x0001] = 0x00;
    buffer[0x0005] = 0xDB;
    buffer[0x0006] = 0x01;
    buffer[0x0007] = 0xC9;

    while (PC < fileSize) {
        if (PC == 0x0005) {
            uint8_t C = LOW_BYTE(BC);
            if (C == 9) {
                while (buffer[DE] != '$') {
                    printf("%c", buffer[DE]);
                }
            }
            if (C == 2) {
                printf("%c", LOW_BYTE(DE));
            }
        }
        opcodeExtract(&state);
        PC++;
    }
    return 0;
}